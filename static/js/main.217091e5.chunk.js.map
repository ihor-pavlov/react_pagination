{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","_ref","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","handlePageChange","page","_jsxs","className","children","_jsx","concat","href","onClick","renderPagination","pages","i","push","App","setCurrentPage","useState","itemsPerPage","setItemsPerPage","items","from","to","numbers","n","getNumbers","map","min","id","value","onChange","e","Number","target","htmlFor","slice","item","ReactDOM","render","document","getElementById"],"mappings":"uKAGO,MAAMA,EAAwCC,IAK9C,IAL+C,MACpDC,EAAK,QACLC,EAAO,YACPC,EAAc,EAAC,aACfC,GACDJ,EACC,MAAMK,EAAaC,KAAKC,KAAKN,EAAQC,GAE/BM,EAAoBC,IACpBA,IAASN,GACXC,EAAaK,IA4BjB,OACEC,eAAA,MAAIC,UAAU,aAAYC,SAAA,CACxBC,cAAA,MAAIF,UAAS,aAAAG,OAA+B,IAAhBX,EAAoB,WAAa,IAAKS,SAChEC,cAAA,KACE,UAAQ,WACRF,UAAU,YACVI,KAAK,QACLC,QAASA,KACa,IAAhBb,GACFK,EAAiBL,EAAc,IAGnC,gBAA+B,IAAhBA,EAAkBS,SAClC,WArCkBK,MACvB,MAAMC,EAAQ,GAEd,IAAK,IAAIC,EAAI,EAAGA,GAAKd,EAAYc,GAAK,EACpCD,EAAME,KACJP,cAAA,MAEEF,UAAS,aAAAG,OAAeX,IAAgBgB,EAAI,SAAW,IAAKP,SAE5DC,cAAA,KACE,UAAQ,WACRF,UAAU,YACVI,KAAI,IAAAD,OAAMK,GACVH,QAASA,IAAMR,EAAiBW,GAAGP,SAElCO,KATEA,IAeX,OAAOD,GAoBJD,GACDJ,cAAA,MACEF,UAAS,aAAAG,OAAeX,IAAgBE,EAAa,WAAa,IAAKO,SAEvEC,cAAA,KACE,UAAQ,WACRF,UAAU,YACVI,KAAK,QACLC,QAASA,KACHb,IAAgBE,GAClBG,EAAiBL,EAAc,IAGnC,gBAAeA,IAAgBE,EAAWO,SAC3C,eCnEIS,EAAgBA,KAC3B,MACOlB,EAAamB,GAAkBC,mBAAiB,IAChDC,EAAcC,GAAmBF,mBAAiB,GACnDG,ECTD,SAAoBC,EAAcC,GACvC,MAAMC,EAAU,GAEhB,IAAK,IAAIC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQT,KAAKU,GAGf,OAAOD,EDEiBE,CAAW,EAHrB,IAG+BC,KAAIF,GAAC,QAAAhB,OAAYgB,KAW9D,OACEpB,eAAA,OAAKC,UAAU,YAAWC,SAAA,CACxBC,cAAA,MAAAD,SAAI,0BAEJC,cAAA,KAAGF,UAAU,OAAO,UAAQ,OAAMC,SAAA,QAAAE,OACvBX,EAAW,YAAAW,QAAYX,EAAc,GAAKqB,EAAe,EAAC,OAAAV,OAAMR,KAAK2B,IAAI9B,EAAcqB,EAnBxF,IAmB4G,QAAAV,OAnB5G,GAmBwH,OAGlIJ,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BC,cAAA,OAAKF,UAAU,0BAAyBC,SACtCF,eAAA,UACE,UAAQ,kBACRwB,GAAG,kBACHvB,UAAU,eACVwB,MAAOX,EACPY,SApBmBC,IAC3BZ,EAAgBa,OAAOD,EAAEE,OAAOJ,QAChCb,EAAe,IAkBuBV,SAAA,CAE9BC,cAAA,UAAQsB,MAAM,IAAGvB,SAAC,MAClBC,cAAA,UAAQsB,MAAM,IAAGvB,SAAC,MAClBC,cAAA,UAAQsB,MAAM,KAAIvB,SAAC,OACnBC,cAAA,UAAQsB,MAAM,KAAIvB,SAAC,YAIvBC,cAAA,SAAO2B,QAAQ,kBAAkB7B,UAAU,qBAAoBC,SAAC,sBAKlEC,cAACd,EAAU,CACTE,MA5CQ,GA6CRC,QAASsB,EACTrB,YAAaA,EACbC,aA1CoBK,IACxBa,EAAeb,MA4CbI,cAAA,MAAAD,SACGc,EACEe,OAAOtC,EAAc,GAAKqB,EAAcrB,EAAcqB,GACtDQ,KAAIU,GACH7B,cAAA,MAAe,UAAQ,OAAMD,SAC1B8B,GADMA,WEzDrBC,IAASC,OAAO/B,cAACQ,EAAG,IAAKwB,SAASC,eAAe,U","file":"static/js/main.217091e5.chunk.js","sourcesContent":["import React from 'react';\nimport { PaginationProps } from '../../interfaces/PaginationProps';\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  total,\n  perPage,\n  currentPage = 1,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n\n  const handlePageChange = (page: number) => {\n    if (page !== currentPage) {\n      onPageChange(page);\n    }\n  };\n\n  const renderPagination = () => {\n    const pages = [];\n\n    for (let i = 1; i <= totalPages; i += 1) {\n      pages.push(\n        <li\n          key={i}\n          className={`page-item ${currentPage === i ? 'active' : ''}`}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${i}`}\n            onClick={() => handlePageChange(i)}\n          >\n            {i}\n          </a>\n        </li>,\n      );\n    }\n\n    return pages;\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          onClick={() => {\n            if (currentPage !== 1) {\n              handlePageChange(currentPage - 1);\n            }\n          }}\n          aria-disabled={currentPage === 1}\n        >\n          «\n        </a>\n      </li>\n      {renderPagination()}\n      <li\n        className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          onClick={() => {\n            if (currentPage !== totalPages) {\n              handlePageChange(currentPage + 1);\n            }\n          }}\n          aria-disabled={currentPage === totalPages}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nexport const App: React.FC = () => {\n  const total = 42;\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [itemsPerPage, setItemsPerPage] = useState<number>(5);\n  const items: string[] = getNumbers(1, total).map(n => `Item ${n}`);\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const handlePerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setItemsPerPage(Number(e.target.value));\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${(currentPage - 1) * itemsPerPage + 1} - ${Math.min(currentPage * itemsPerPage, total)} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={handlePerPageChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={handlePageChange}\n      />\n\n      <ul>\n        {items\n          .slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\n          .map(item => (\n            <li key={item} data-cy=\"item\">\n              {item}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}